# Powerline (https://powerline.readthedocs.io/en/latest/usage/other.html#tmux-statusline)
run-shell "powerline-daemon -q"
source "/usr/local/lib/python3.7/site-packages/powerline/bindings/tmux/powerline.conf"

# C-\ C-\ to go back
bind-key C-'\' last-window

# nowait for command sequences
set -sg escape-time 1

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# From tmux, Productive Mouse-Free Development
######################
# Ctrl + \ for prefix
set-option -g prefix C-'\'
bind C-'\' send-prefix
unbind C-b

# 1-index, not 0-index
set -g base-index 1
setw -g base-index 1

# vim-like window selection
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# vim-like resize
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# vim-like mode keys
setw -g mode-keys vi

# vim-tmux-navigator
# Smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
# bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# vim-like copy
unbind [
bind Escape copy-mode
unbind p
bind p paste-buffer
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection
